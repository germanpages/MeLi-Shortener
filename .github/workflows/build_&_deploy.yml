name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  set-environment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Build
      run: go build -v -o bin/main ./src/main.go
      env:
        GOROOT: /opt/hostedtoolcache/go/1.21.3/x64


  deploy_green:
    needs: set-environment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.3
    
    - name: Build
      run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/main src/main.go
    
    - name: Setup AWS SAM command line interpreter
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Deploy cloudformation
      run: |
        sam build --use-container
        sam deploy --no-fail-on-empty-changeset --stack-name dynamodb-stack

    - name: Install Serverless Framework
      run: npm install -g serverless

    - name: Install Serverless plugins
      run: |
        serverless plugin install -n serverless-go-build
        serverless plugin install -n serverless-scriptable-plugin

    - name: Deploy to Green
      id: deploy_green
      run: |
        OUTPUT=$(npx serverless deploy --stage green)
        URL_LAMBDA=$(echo "$OUTPUT" | grep -oP 'https://[^/]*')
        echo "::set-output name=url_lambda::$URL_LAMBDA"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}


    - name: Run Newman Tests
      run: newman run tests/postman/Shortener.postman_collection.json --env-var "URL_LAMBDA=${{ steps.deploy_green.outputs.url_lambda }}"

  deploy_blue:
    
    needs: deploy_green
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.3

    - name: Build
      run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/main src/main.go

    - name: Serverless remove
      uses: serverless/github-action@master
      with:
        args: remove --stage blue
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

  cleanup:
    if: always()
    needs: [deploy_green, deploy_blue]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Serverless remove
      uses: serverless/github-action@master
      with:
        args: remove --stage green
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}